// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

enum ProductStatus {
  PENDING
  VALIDATED
  REJECTED
}

enum Etat {
  NEUF
  OCCASION
  CORRECT
}

/**
 * model User {
 * id           String        @id @default(uuid()) @db.VarChar(36)
 * firstName    String
 * lastName     String
 * email        String        @unique @db.VarChar(191)
 * password     String
 * roles        UserRole[]
 * status       AccountStatus @default(PENDING)
 * avatar       String? // une imge comme photo de profile c'est facultatif
 * phone        String? // numéro de téléphone facultatif
 * cinPdf       String? // PDF de la carte d'identité
 * otp          String? // Code OTP pour la vérification
 * isVerified   Boolean       @default(false) // Indique si l'utilisateur a vérifié son compte
 * createdAt    DateTime      @default(now())
 * updatedAt    DateTime      @updatedAt
 * products     Product[]
 * contacts     Contact[]
 * reviewsGiven   Review[] @relation("Reviewer")
 * reviewsReceived Review[] @relation("Author")
 * favorites    Favorite[]
 * resetToken   String?
 * resetExpires DateTime?
 * }
 */

model User {
  id              String          @id @default(uuid()) @db.VarChar(36)
  firstName       String
  lastName        String
  email           String          @unique @db.VarChar(191)
  password        String
  roles           UserRole[]
  status          AccountStatus   @default(PENDING)
  avatar          String? // une imge comme photo de profile c'est facultatif
  phone           String? // numéro de téléphone facultatif
  cinPdf          String? // PDF de la carte d'identité
  otp             String? // Code OTP pour la vérification
  isVerified      Boolean         @default(false) // Indique si l'utilisateur a vérifié son compte
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  products        Product[]
  contacts        Contact[]
  reviewsGiven    Review[]        @relation("Reviewer")
  reviewsReceived Review[]        @relation("Author")
  favorites       Favorite[]
  notifications   Notification[]
  lastConnexion   DateTime?
  token           String?
  expireAtToken   DateTime?
  refreshToken    String?
  resetToken      String?         @db.Text
  resetExpires    DateTime?
  connectionLog   ConnectionLog[]
}

model Role {
  id          String           @id @default(uuid()) @db.VarChar(36)
  name        String           @unique @db.VarChar(191)
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id            String           @id @default(uuid()) @db.VarChar(36)
  permissionKey String           @unique @db.VarChar(191)
  title         String
  description   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  roles         RolePermission[]
}

model UserRole {
  id         String   @id @default(uuid()) @db.VarChar(36)
  roleId     String   @db.VarChar(36)
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  userId     String   @db.VarChar(36)
  user       User     @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  assignedAt DateTime @default(now())
  assignedBy String?

  @@unique([userId, roleId])
}

model RolePermission {
  id           String     @id @default(uuid()) @db.VarChar(36)
  roleId       String     @db.VarChar(36)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  permissionId String     @db.VarChar(36)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  assignedAt   DateTime   @default(now())

  @@unique([roleId, permissionId])
}

model Product {
  id              String           @id @default(uuid()) @db.VarChar(36)
  name            String?
  price           Float
  quantity        Int
  description     String
  images          Json // Tableau d'URLs d'images (5 images max et une image minimum)
  category        Category         @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId      String           @db.VarChar(36)
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String           @db.VarChar(36)
  city            City             @relation(fields: [cityId], references: [id], onDelete: Restrict)
  cityId          String           @db.VarChar(36)
  status          ProductStatus    @default(PENDING)
  etat            Etat
  quartier        String? // Quartier de la ville
  telephone       String // Numéro de téléphone du vendeur
  favorites       Favorite[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  productForfaits ProductForfait[]
}

model Category {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String    @unique @db.VarChar(191)
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model City {
  id        String    @id @default(uuid()) @db.VarChar(36)
  name      String    @unique @db.VarChar(191)
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int // Note de 1 à 5
  userId    String // Celui qui laisse la note
  authorId  String // Celui qui reçoit la note (auteur du produit)
  createdAt DateTime @default(now())

  user   User @relation("Reviewer", fields: [userId], references: [id], onDelete: Cascade)
  author User @relation("Author", fields: [authorId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(uuid()) @db.VarChar(36)
  name      String
  email     String
  subject   String
  message   String
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?  @db.VarChar(36)
  createdAt DateTime @default(now())
}

model Favorite {
  id        String   @id @default(uuid()) @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.VarChar(36)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String   @db.VarChar(36)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model ConnectionLog {
  id        String   @id @default(uuid()) @db.VarChar(36)
  ipAddress String
  userAgent String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ForfaitType {
  URGENT
  TOP_ANNONCE
  MISE_EN_AVANT
  PREMIUM
}

model Forfait {
  id          String           @id @default(uuid()) @db.VarChar(36)
  type        ForfaitType
  price       Int
  duration    Int // en jours
  description String?
  products    ProductForfait[]
  createdAt   DateTime         @default(now())
}

model ProductForfait {
  id          String   @id @default(uuid()) @db.VarChar(36)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String   @db.VarChar(36)
  forfait     Forfait  @relation(fields: [forfaitId], references: [id])
  forfaitId   String   @db.VarChar(36)
  activatedAt DateTime @default(now())
  expiresAt   DateTime
  isActive    Boolean  @default(true)
}

model Notification {
  id        String   @id @default(uuid()) @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.VarChar(36)
  title     String
  message   String
  data      Json? // éventuelles données supplémentaires
  link      String? // lien à ouvrir côté client
  type      String? // ex: 'PRODUCT', 'WELCOME', 'SYSTEM'
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}
