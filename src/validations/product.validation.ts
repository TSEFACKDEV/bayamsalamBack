import * as yup from "yup";
import {
  sanitizeProductName,
  sanitizeDescription,
  sanitizeXSS,
} from "../utils/sanitization.utils.js";

// üîê Validateurs personnalis√©s avec sanitization intelligente
const sanitizedStringValidator = (fieldName: string, maxLength: number = 500) =>
  yup
    .string()
    .transform((value) => sanitizeXSS(value))
    .max(maxLength, `${fieldName} ne peut pas d√©passer ${maxLength} caract√®res`)
    .required(`${fieldName} est requis`);

const sanitizedProductNameValidator = () =>
  yup
    .string()
    .transform((value) => sanitizeProductName(value))
    .min(2, "Le nom doit contenir au moins 2 caract√®res")
    .max(100, "Le nom ne peut pas d√©passer 100 caract√®res")
    .required("Le nom est requis");

const sanitizedDescriptionValidator = () =>
  yup
    .string()
    .transform((value) => sanitizeDescription(value))
    .min(10, "La description doit contenir au moins 10 caract√®res")
    .max(2000, "La description ne peut pas d√©passer 2000 caract√®res")
    .required("La description est requise");

// üîê Validation s√©curis√©e pour la cr√©ation d'un produit
export const createProductSchema = yup.object().shape({
  name: sanitizedProductNameValidator(),
  price: yup
    .number()
    .typeError("Le prix doit √™tre un nombre")
    .positive("Le prix doit √™tre positif")
    .max(10000000, "Le prix ne peut pas d√©passer 10 millions")
    .required("Le prix est requis"),
  quantity: yup
    .number()
    .typeError("La quantit√© doit √™tre un nombre")
    .integer("La quantit√© doit √™tre un nombre entier")
    .min(0, "La quantit√© ne peut pas √™tre n√©gative")
    .max(100000, "La quantit√© ne peut pas d√©passer 100 000")
    .required("La quantit√© est requise"),
  description: sanitizedDescriptionValidator(),
  categoryId: yup
    .string()
    .uuid("L'ID de cat√©gorie doit √™tre un UUID valide")
    .required("La cat√©gorie est requise"),
  cityId: yup
    .string()
    .uuid("L'ID de ville doit √™tre un UUID valide")
    .required("La ville est requise"),
  etat: yup
    .string()
    .oneOf(["NEUF", "OCCASION", "CORRECT"], "√âtat invalide")
    .required("L'√©tat est requis"),
  quartier: sanitizedStringValidator("Le quartier", 100).nullable(),
  telephone: yup
    .string()
    .matches(/^[+]?[\d\s\-()]{8,20}$/, "Num√©ro de t√©l√©phone invalide")
    .required("Le t√©l√©phone est requis"),
  forfaitType: yup
    .string()
    .oneOf(
      ["PREMIUM", "A_LA_UNE", "TOP_ANNONCE", "URGENT"],
      "Type de forfait invalide"
    )
    .nullable(),
  images: yup
    .array()
    .of(yup.mixed())
    .min(1, "Au moins une image est requise")
    .max(5, "Maximum 5 images"),
});

// Validation pour la revue d'un produit (validation/rejet)
export const reviewProductSchema = yup.object().shape({
  action: yup
    .string()
    .oneOf(["validate", "reject"], "Action invalide")
    .required("L'action est requise"),
});
