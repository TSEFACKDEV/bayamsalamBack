"use strict";
/**
 * üîê UTILITAIRES DE S√âCURIT√â - SANITIZATION INTELLIGENTE
 *
 * Module centralisant toutes les fonctions de s√©curisation des donn√©es
 * pour pr√©venir les injections NoSQL, XSS et autres vuln√©rabilit√©s.
 *
 * PRINCIPE : Nettoyer sans casser l'exp√©rience utilisateur
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeSearchParam = sanitizeSearchParam;
exports.sanitizeXSS = sanitizeXSS;
exports.sanitizeNumericParam = sanitizeNumericParam;
exports.sanitizeFloatParam = sanitizeFloatParam;
exports.sanitizeProductName = sanitizeProductName;
exports.sanitizeDescription = sanitizeDescription;
exports.sanitizeUUID = sanitizeUUID;
/**
 * üîç SANITIZATION DES PARAM√àTRES DE RECHERCHE
 *
 * Nettoie les param√®tres de recherche pour pr√©venir les injections NoSQL
 * tout en conservant une recherche fonctionnelle.
 *
 * @param searchParam Param√®tre de recherche brut
 * @returns Param√®tre sanitis√© s√ªr pour Prisma
 */
function sanitizeSearchParam(searchParam) {
    // Si pas de param√®tre, retourner cha√Æne vide
    if (!searchParam || typeof searchParam !== 'string') {
        return '';
    }
    // Convertir en string et nettoyer
    let sanitized = String(searchParam).trim();
    // Supprimer les caract√®res dangereux pour NoSQL
    // Garder : lettres, chiffres, espaces, accents, apostrophes, tirets
    sanitized = sanitized.replace(/[^\w\s\u00C0-\u017F\u0100-\u024F\u1E00-\u1EFF'-]/g, '');
    // Limiter la longueur pour √©viter les attaques par d√©ni de service
    const MAX_SEARCH_LENGTH = 100;
    if (sanitized.length > MAX_SEARCH_LENGTH) {
        sanitized = sanitized.substring(0, MAX_SEARCH_LENGTH);
    }
    // Supprimer les espaces multiples
    sanitized = sanitized.replace(/\s+/g, ' ').trim();
    return sanitized;
}
/**
 * üõ°Ô∏è SANITIZATION ANTI-XSS INTELLIGENTE
 *
 * Nettoie le contenu HTML/JavaScript malveillant tout en pr√©servant
 * le texte l√©gitime avec accents, ponctuation, etc.
 *
 * @param input Texte √† sanitiser
 * @returns Texte nettoy√© et s√©curis√©
 */
function sanitizeXSS(input) {
    if (!input || typeof input !== 'string') {
        return '';
    }
    let sanitized = String(input).trim();
    // Supprimer les balises HTML/XML
    sanitized = sanitized.replace(/<[^>]*>/g, '');
    // Supprimer les attributs JavaScript dangereux
    sanitized = sanitized.replace(/on\w+\s*=\s*['""].*?['"']/gi, '');
    // Supprimer javascript: et data: schemes
    sanitized = sanitized.replace(/(javascript|data|vbscript):/gi, '');
    // Supprimer les caract√®res de contr√¥le dangereux
    sanitized = sanitized.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '');
    // Encoder les caract√®res HTML dangereux restants
    sanitized = sanitized
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;');
    // Limiter la longueur selon le type de champ
    const MAX_TEXT_LENGTH = 1000;
    if (sanitized.length > MAX_TEXT_LENGTH) {
        sanitized = sanitized.substring(0, MAX_TEXT_LENGTH);
    }
    return sanitized;
}
/**
 * üî¢ VALIDATION ET SANITIZATION DES PARAM√àTRES NUM√âRIQUES
 *
 * Valide et convertit les param√®tres num√©riques de mani√®re s√©curis√©e.
 *
 * @param param Param√®tre √† valider
 * @param defaultValue Valeur par d√©faut si invalide
 * @param min Valeur minimale autoris√©e
 * @param max Valeur maximale autoris√©e
 * @returns Nombre valid√© et s√©curis√©
 */
function sanitizeNumericParam(param, defaultValue, min = Number.MIN_SAFE_INTEGER, max = Number.MAX_SAFE_INTEGER) {
    if (!param)
        return defaultValue;
    const parsed = typeof param === 'string' ? parseInt(param, 10) : Number(param);
    // V√©rifier si c'est un nombre valide
    if (isNaN(parsed) || !isFinite(parsed)) {
        return defaultValue;
    }
    // Appliquer les limites
    if (parsed < min)
        return min;
    if (parsed > max)
        return max;
    return parsed;
}
/**
 * üî¢ VALIDATION ET SANITIZATION DES PARAM√àTRES D√âCIMAUX
 *
 * Valide et convertit les param√®tres d√©cimaux (prix, etc.) de mani√®re s√©curis√©e.
 */
function sanitizeFloatParam(param, defaultValue, min = 0, max = Number.MAX_SAFE_INTEGER) {
    if (!param)
        return defaultValue;
    const parsed = typeof param === 'string' ? parseFloat(param) : Number(param);
    if (isNaN(parsed) || !isFinite(parsed)) {
        return defaultValue;
    }
    if (parsed < min)
        return min;
    if (parsed > max)
        return max;
    return parsed;
}
/**
 * üìù SANITIZATION SP√âCIALIS√âE POUR LES NOMS DE PRODUITS
 *
 * Validation sp√©cifique pour les noms de produits avec pr√©servation
 * des caract√®res l√©gitimes commerciaux.
 */
function sanitizeProductName(name) {
    if (!name || typeof name !== 'string') {
        return '';
    }
    let sanitized = String(name).trim();
    // Supprimer uniquement les caract√®res dangereux, garder les caract√®res commerciaux
    // Autoris√© : lettres, chiffres, espaces, accents, tirets, parenth√®ses, points, virgules
    sanitized = sanitized.replace(/[^\w\s\u00C0-\u017F\u0100-\u024F\u1E00-\u1EFF()\-.,'/]/g, '');
    // Nettoyer HTML/JS
    sanitized = sanitizeXSS(sanitized);
    // Limiter longueur
    const MAX_NAME_LENGTH = 100;
    if (sanitized.length > MAX_NAME_LENGTH) {
        sanitized = sanitized.substring(0, MAX_NAME_LENGTH);
    }
    return sanitized;
}
/**
 * üìù SANITIZATION POUR LES DESCRIPTIONS
 *
 * Permet plus de caract√®res pour les descriptions tout en restant s√©curis√©.
 */
function sanitizeDescription(description) {
    if (!description || typeof description !== 'string') {
        return '';
    }
    let sanitized = String(description).trim();
    // Supprimer HTML/JS mais garder la ponctuation et les retours ligne
    sanitized = sanitizeXSS(sanitized);
    // Limiter longueur
    const MAX_DESC_LENGTH = 2000;
    if (sanitized.length > MAX_DESC_LENGTH) {
        sanitized = sanitized.substring(0, MAX_DESC_LENGTH);
    }
    return sanitized;
}
/**
 * üÜî VALIDATION DES IDENTIFIANTS UUID
 *
 * Valide que les IDs sont bien des UUIDs valides.
 */
function sanitizeUUID(id) {
    if (!id || typeof id !== 'string') {
        return null;
    }
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    return uuidRegex.test(id) ? id : null;
}
// Note: logSecurityEvent a √©t√© migr√©e vers securityMonitor.ts pour plus de fonctionnalit√©s
exports.default = {
    sanitizeSearchParam,
    sanitizeXSS,
    sanitizeNumericParam,
    sanitizeFloatParam,
    sanitizeProductName,
    sanitizeDescription,
    sanitizeUUID,
};
