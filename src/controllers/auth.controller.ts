/**
 * üîê CONTR√îLEUR D'AUTHENTIFICATION - BuyAndSale
 *
 * Ce module g√®re l'authentification et l'autorisation des utilisateurs.
 *
 * FONCTIONNALIT√âS PRINCIPALES:
 * - Inscription et v√©rification OTP
 * - Connexion locale et Google OAuth
 * - Gestion des tokens JWT (Access + Refresh)
 * - Support multi-device (sessions simultan√©es)
 * - R√©initialisation de mot de passe
 * - Gestion s√©curis√©e des erreurs
 *
 * üîí STRAT√âGIE DE S√âCURIT√â:
 * - Validation stricte des entr√©es utilisateur
 * - Hachage s√©curis√© des mots de passe
 * - Rotation automatique des refresh tokens
 * - Gestion permissive pour sessions multiples
 * - Logs d√©taill√©s pour monitoring
 *
 * üì± SUPPORT MULTI-DEVICE:
 * Les utilisateurs peuvent se connecter depuis plusieurs appareils simultan√©ment.
 * Les anciens refresh tokens restent valides pour √©viter les d√©connexions forc√©es.
 */

import { NextFunction, Request, Response } from "express";
import { hashPassword, comparePassword } from "../utilities/bcrypt.js";
import {
  generateToken,
  generateResToken,
  verifyToken,
  generateRefreshToken,
} from "../utilities/token.js";
import { sendEmail } from "../utilities/mailer.js";
import { sendSMS } from "../utilities/sms.js";
import { generateOTP, validateOTP } from "../utilities/otp.js";
import prisma from "../model/prisma.client.js";
import env from "../config/config.js";
import ResponseApi from "../helper/response.js";
import Utils from "../helper/utils.js";
import { createOTPEmailTemplate } from "../templates/otpEmailTemplate.js";
import { createNotification } from "../services/notification.service.js";
import {
  validateAndNormalizeRegistration,
  validateLoginData,
} from "../utilities/input.validation.js";

interface RegisterData {
  email: string;
  password: string;
  name: string;
  phone: string;
  firstName: string;
  lastName: string;
}

interface LoginData {
  email: string;
  password: string;
}

export const register = async (req: Request, res: Response): Promise<any> => {
  try {
    // üîê VALIDATION S√âCURIS√âE DES DONN√âES
    const validation = validateAndNormalizeRegistration(req.body);
    if (!validation.isValid) {
      return ResponseApi.error(
        res,
        validation.message || "Donn√©es invalides",
        null,
        400
      );
    }

    const { email, firstName, lastName, phone, password } =
      validation.normalizedData!;

    const existingUser = await prisma.user.findUnique({
      where: { email },
    });

    if (existingUser) {
      // Permettre la r√©inscription si compte non v√©rifi√©
      if (!existingUser.isVerified) {
        // Supprimer l'ancien compte non v√©rifi√© et ses relations
        await prisma.userRole.deleteMany({
          where: { userId: existingUser.id },
        });
        await prisma.user.delete({
          where: { id: existingUser.id },
        });

        console.log(`Compte non v√©rifi√© supprim√© pour r√©inscription: ${email}`);
      } else {
        // Compte d√©j√† v√©rifi√©, impossible de se r√©inscrire
        return ResponseApi.error(
          res,
          "Un utilisateur avec cet email existe d√©j√†",
          null,
          400
        );
      }
    }

    const hashedPassword = await hashPassword(password);

    const newUser = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        firstName,
        lastName,
        phone,
      },
    });

    // Ajout automatique du r√¥le USER
    const userRole = await prisma.role.findUnique({ where: { name: "USER" } });
    if (userRole) {
      await prisma.userRole.create({
        data: {
          userId: newUser.id,
          roleId: userRole.id,
        },
      });
    }

    const otp = generateOTP();
    const smsSent = await sendSMS(phone, `Votre code OTP est: ${otp}`);
    // Log OTP en d√©veloppement pour faciliter les tests
    if (process.env.NODE_ENV === "development") {
      console.log(`OTP pour ${phone}: ${otp}`);
    }

    if (!smsSent) {
      // Plus besoin de logoUrl !
      const htmlTemplate = createOTPEmailTemplate(firstName, lastName, otp);

      await sendEmail(
        email,
        "üîê Code de v√©rification BuyAndSale - Bienvenue !",
        `Bonjour ${firstName} ${lastName},\n\nVotre code OTP est: ${otp}\n\nBienvenue sur BuyAndSale !`,
        htmlTemplate
      );
    }
    await prisma.user.update({
      where: { id: newUser.id },
      data: {
        otp,
        otpExpires: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes d'expiration
        otpAttempts: 1, // Premier envoi d'OTP
        otpLastAttempt: new Date(), // Timestamp du premier envoi
      },
    });

    return ResponseApi.success(
      res,
      "Inscription r√©ussie. Veuillez v√©rifier votre OTP.",
      {
        userId: newUser.id,
      },
      201
    );
  } catch (error: any) {
    console.error("Erreur lors de l'inscription:", error);
    return ResponseApi.error(
      res,
      "Une erreur est survenue lors de l'inscription",
      error.message,
      500
    );
  }
};

export const verifyOTP = async (req: Request, res: Response): Promise<any> => {
  try {
    const { otp, userId } = req.body;

    if (!otp || !userId) {
      return ResponseApi.error(res, "OTP et userId sont requis", null, 400);
    }

    const existingUser = await prisma.user.findUnique({
      where: { id: userId },
    });

    if (!existingUser) {
      return ResponseApi.notFound(res, "Utilisateur non trouv√©", 404);
    }

    if (existingUser.isVerified) {
      return ResponseApi.error(res, "Le compte est d√©j√† v√©rifi√©", null, 400);
    }

    // üïí V√âRIFICATION DE L'EXPIRATION DE L'OTP
    if (existingUser.otpExpires && existingUser.otpExpires < new Date()) {
      return ResponseApi.error(
        res,
        "Code OTP expir√©. Demandez un nouveau code via resend-otp",
        {
          code: "OTP_EXPIRED",
          expiredAt: existingUser.otpExpires,
          hint: "Utilisez l'endpoint /resend-otp pour obtenir un nouveau code",
        },
        400
      );
    }

    if (!validateOTP(otp, existingUser.otp)) {
      return ResponseApi.error(res, "OTP invalide", null, 400);
    }

    const user = await prisma.user.update({
      where: { id: userId },
      data: {
        otp: null,
        otpExpires: null, // Nettoyer l'expiration aussi
        otpAttempts: 0, // R√©initialiser le compteur de tentatives
        otpLastAttempt: null, // R√©initialiser le timestamp
        isVerified: true,
        status: "ACTIVE",
      },
    });

    // Cr√©er notification de bienvenue
    await createNotification(
      user.id,
      "Bienvenue sur BuyAndSale",
      "Votre compte a √©t√© v√©rifi√© avec succ√®s. Bienvenue !",
      {
        type: "WELCOME",
        link: "/",
      }
    );

    // Envoi du mail de bienvenue apr√®s v√©rification OTP
    try {
      // Import dynamique pour √©viter les probl√®mes d'import circulaire
      const { createWelcomeTemplate } = await import(
        "../templates/welComeTemplate.js"
      );
      const htmlTemplate = createWelcomeTemplate(user.firstName, user.lastName);

      await sendEmail(
        user.email,
        "üéâ Bienvenue sur BuyAndSale !",
        `Bonjour ${user.firstName} ${user.lastName},\n\nVotre compte a √©t√© v√©rifi√© avec succ√®s. Bienvenue sur BuyAndSale !`,
        htmlTemplate
      );
    } catch (mailError) {
      console.error("Erreur lors de l'envoi du mail de bienvenue:", mailError);
      // On ne bloque pas la r√©ponse si le mail √©choue
    }

    return ResponseApi.success(res, "OTP v√©rifi√© avec succ√®s", user, 200);
  } catch (error: any) {
    console.error("Erreur lors de la v√©rification OTP:", error);
    return ResponseApi.error(
      res,
      "Une erreur est survenue lors de la v√©rification OTP",
      error.message,
      500
    );
  }
};

export const resendOTP = async (req: Request, res: Response): Promise<any> => {
  try {
    const { userId } = req.body;

    if (!userId) {
      return ResponseApi.error(res, "UserId est requis", null, 400);
    }

    const user = await prisma.user.findUnique({
      where: { id: userId },
    });

    if (!user) {
      return ResponseApi.error(res, "Utilisateur non trouv√©", null, 404);
    }

    if (user.isVerified) {
      return ResponseApi.error(res, "Compte d√©j√† v√©rifi√©", null, 400);
    }

    // ÔøΩÔ∏è PROTECTION: V√©rifier les tentatives de renvoi OTP (3 max par heure)
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    const shouldResetAttempts =
      !user.otpLastAttempt || user.otpLastAttempt < oneHourAgo;

    if (shouldResetAttempts) {
      // R√©initialiser le compteur si plus d'1 heure s'est √©coul√©e
      await prisma.user.update({
        where: { id: userId },
        data: {
          otpAttempts: 0,
          otpLastAttempt: new Date(),
        },
      });
    } else if (user.otpAttempts >= 3) {
      // Limite de 3 tentatives par heure atteinte
      const timeLeft = Math.ceil(
        (user.otpLastAttempt!.getTime() + 60 * 60 * 1000 - Date.now()) /
          1000 /
          60
      );
      return ResponseApi.error(
        res,
        `Limite de tentatives atteinte (3 max par heure). R√©essayez dans ${timeLeft} minutes`,
        {
          code: "OTP_ATTEMPT_LIMIT_EXCEEDED",
          attemptsUsed: user.otpAttempts,
          maxAttempts: 3,
          resetInMinutes: timeLeft,
          nextAttemptAt: new Date(
            user.otpLastAttempt!.getTime() + 60 * 60 * 1000
          ),
        },
        429
      );
    }

    // ÔøΩüîê S√âCURIT√â: V√©rifier si un OTP a √©t√© r√©cemment envoy√© (limite 1 minute)
    const oneMinuteAgo = new Date(Date.now() - 60 * 1000);
    if (user.updatedAt && user.updatedAt > oneMinuteAgo) {
      return ResponseApi.error(
        res,
        "Veuillez attendre 1 minute avant de demander un nouveau code",
        null,
        429
      );
    }

    // üî¢ G√âN√âRATION D'UN NOUVEAU CODE OTP
    const otp = generateOTP();

    // üì± ENVOI PAR SMS EN PRIORIT√â
    const smsSent = await sendSMS(
      user.phone!,
      `Votre nouveau code OTP est: ${otp}`
    );

    // Log OTP en d√©veloppement pour faciliter les tests
    if (process.env.NODE_ENV === "development") {
      console.log(`üîÑ Nouveau OTP pour ${user.phone}: ${otp}`);
    }

    // üìß FALLBACK EMAIL SI SMS √âCHOUE
    if (!smsSent && user.email) {
      const htmlTemplate = createOTPEmailTemplate(
        user.firstName,
        user.lastName,
        otp
      );

      await sendEmail(
        user.email,
        "üîÑ Nouveau code de v√©rification BuyAndSale",
        `Bonjour ${user.firstName} ${user.lastName},\n\nVotre nouveau code OTP est: ${otp}\n\nCe code remplace le pr√©c√©dent.`,
        htmlTemplate
      );
    }

    // üíæ MISE √Ä JOUR EN BASE DE DONN√âES
    await prisma.user.update({
      where: { id: userId },
      data: {
        otp,
        otpExpires: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes d'expiration
        otpAttempts: shouldResetAttempts ? 1 : (user.otpAttempts || 0) + 1, // Incr√©menter ou r√©initialiser
        otpLastAttempt: new Date(), // Mettre √† jour le timestamp de la derni√®re tentative
        updatedAt: new Date(), // Important pour le rate limiting
      },
    });

    // üìä LOG POUR MONITORING
    console.log(
      `‚úÖ [ResendOTP] Nouveau code envoy√© pour utilisateur ${userId}:`,
      {
        phone: user.phone,
        email: user.email,
        method: smsSent ? "SMS" : "EMAIL",
        timestamp: new Date().toISOString(),
      }
    );

    return ResponseApi.success(
      res,
      smsSent
        ? "Nouveau code OTP envoy√© par SMS"
        : "Nouveau code OTP envoy√© par email",
      {
        userId: user.id,
        method: smsSent ? "SMS" : "EMAIL",
      },
      200
    );
  } catch (error: any) {
    console.error("‚ùå Erreur lors du renvoi OTP:", error);
    return ResponseApi.error(
      res,
      "Une erreur est survenue lors du renvoi de l'OTP",
      error.message,
      500
    );
  }
};

export const login = async (req: Request, res: Response): Promise<any> => {
  try {
    // üîê VALIDATION S√âCURIS√âE DES DONN√âES DE CONNEXION
    const validation = validateLoginData(req.body);
    if (!validation.isValid) {
      return ResponseApi.error(
        res,
        validation.message || "Donn√©es de connexion invalides",
        null,
        400
      );
    }

    const { identifiant, password }: { identifiant: string; password: string } =
      req.body;

    if (!identifiant || !password) {
      return ResponseApi.error(
        res,
        "Identifiant et mot de passe sont requis",
        null,
        400
      );
    }

    const user = await prisma.user.findFirst({
      where: {
        OR: [{ email: identifiant }, { phone: identifiant }],
      },
      include: {
        roles: {
          include: {
            role: {
              include: {
                permissions: {
                  include: {
                    permission: true,
                  },
                },
              },
            },
          },
        },
      },
    });

    if (!user) {
      return ResponseApi.error(
        res,
        "Identifiant ou mot de passe incorrect",
        null,
        401
      );
    }

    if (!user.isVerified) {
      return ResponseApi.error(
        res,
        "Compte non v√©rifi√©. Veuillez v√©rifier votre email.",
        null,
        403
      );
    }

    const isPasswordValid = await comparePassword(password, user.password);

    if (!isPasswordValid) {
      return ResponseApi.error(
        res,
        " Identifiant ou mot de passe incorrect",
        null,
        401
      );
    }

    // üîê G√âN√âRATION DES TOKENS D'AUTHENTIFICATION
    const AccessToken = generateToken({
      id: user.id,
      email: user.email,
    });

    const refreshToken = generateRefreshToken({
      id: user.id,
      email: user.email,
    });

    // üéØ GESTION MULTI-DEVICE POUR LOGIN NORMAL
    // Strat√©gie: Pr√©server les sessions existantes, cr√©er une nouvelle seulement si n√©cessaire
    const shouldCreateNewSession = !user.refreshToken;

    if (shouldCreateNewSession) {
      // Premi√®re connexion ou pas de session active ‚Üí cr√©er une nouvelle session
      await prisma.user.update({
        where: { id: user.id },
        data: {
          refreshToken,
          lastConnexion: new Date(),
        },
      });
    } else {
      // Session existante ‚Üí juste mettre √† jour la derni√®re connexion
      await prisma.user.update({
        where: { id: user.id },
        data: {
          lastConnexion: new Date(),
        },
      });
    }

    // üìä EXTRACTION DES DONN√âES UTILISATEUR (sans le mot de passe)
    const { password: _, ...userData } = user;

    // üîë EXTRACTION DES PERMISSIONS ET R√îLES
    const permissions = userData.roles.flatMap((userRole) => {
      return userRole.role.permissions.map((permission) => {
        return {
          permissionKey: permission.permission.permissionKey,
          title: permission.permission.title,
        };
      });
    });

    const permissionKeys = user.roles.flatMap((userRole) => {
      return userRole.role.permissions.map((permission) => {
        return permission.permission.permissionKey;
      });
    });

    const roles = user.roles.map((userRole) => {
      return userRole.role.name;
    });

    // üîÑ D√âDUPLICATION DES PERMISSIONS
    const uniquePermissions = Array.from(
      new Map(
        permissions.map((permission) => {
          return [permission.permissionKey, permission];
        })
      ).values()
    );

    // üì§ R√âPONSE DE CONNEXION R√âUSSIE
    return ResponseApi.success(res, "Connexion r√©ussie", {
      token: {
        type: "Bearer",
        AccessToken,
        refreshToken: shouldCreateNewSession ? refreshToken : user.refreshToken, // Utiliser le token appropri√©
      },
      user: userData,
    });
  } catch (error: any) {
    // üö® GESTION D'ERREURS D√âTAILL√âE
    console.error("‚ùå Erreur lors de la connexion:", {
      error: error.message,
      stack: process.env.NODE_ENV === "development" ? error.stack : undefined,
      timestamp: new Date().toISOString(),
      userAgent: req.get("User-Agent"),
      ip: req.ip || req.connection.remoteAddress,
    });

    // Gestion d'erreurs sp√©cifiques
    if (error.code === "P2002") {
      // Erreur de contrainte unique Prisma
      return ResponseApi.error(
        res,
        "Conflit de donn√©es lors de la connexion",
        "Un probl√®me de donn√©es a √©t√© d√©tect√©",
        409
      );
    }

    if (error.code === "ECONNREFUSED" || error.code === "ENOTFOUND") {
      // Erreur de base de donn√©es
      return ResponseApi.error(
        res,
        "Service temporairement indisponible",
        "Probl√®me de connexion √† la base de donn√©es",
        503
      );
    }

    if (error.name === "ValidationError") {
      // Erreur de validation
      return ResponseApi.error(res, "Donn√©es invalides", error.message, 400);
    }

    // Erreur g√©n√©rique
    return ResponseApi.error(
      res,
      "Une erreur interne est survenue lors de la connexion",
      process.env.NODE_ENV === "development" ? error.message : "Erreur serveur",
      500
    );
  }
};

/**
 * Refresh TOKEN
 */

export const refreshToken = async (
  req: Request,
  res: Response
): Promise<any> => {
  try {
    // üîê SUPPORT MULTI-SOURCE POUR REFRESH TOKEN
    // Essayer de r√©cup√©rer le refresh token depuis plusieurs sources
    const { jwt: cookieToken } = req.cookies || {};
    const { refreshToken: bodyToken } = req.body || {};
    const refreshToken = bodyToken || cookieToken;

    if (!refreshToken) {
      return ResponseApi.error(
        res,
        "Aucun refresh token fourni",
        {
          code: "NO_REFRESH_TOKEN",
          sources: {
            cookie: !!cookieToken,
            body: !!bodyToken,
          },
        },
        400
      );
    }

    // V√©rifier et d√©coder le refresh token
    const decoded = verifyToken(refreshToken);
    if (!decoded) {
      return ResponseApi.error(
        res,
        "Refresh token invalide",
        {
          code: "INVALID_REFRESH_TOKEN",
        },
        400
      );
    }

    // R√©cup√©rer l'utilisateur
    const user = await prisma.user.findUnique({
      where: { id: decoded.id },
    });

    if (!user) {
      return ResponseApi.error(
        res,
        "Utilisateur non trouv√©",
        {
          code: "USER_NOT_FOUND",
        },
        404
      );
    }

    // üîê VALIDATION PERMISSIVE POUR MULTI-DEVICE
    // Strat√©gie: Accepter les anciens refresh tokens pour permettre plusieurs appareils connect√©s
    const storedToken = user.refreshToken;

    if (storedToken && storedToken !== refreshToken) {
      console.log(
        `‚ÑπÔ∏è [MultiDevice] Utilisateur ${user.id} utilise un ancien refresh token - Autoris√©`
      );
      // ‚úÖ On continue le processus (strat√©gie permissive pour multi-device)
    }

    // üîÑ G√âN√âRATION DU NOUVEAU ACCESS TOKEN
    const newAccessToken = generateToken({
      id: user.id,
      email: user.email,
    });

    // ÔøΩ ROTATION OPTIONNELLE DU REFRESH TOKEN
    // G√©n√©rer un nouveau refresh token pour une s√©curit√© renforc√©e
    const newRefreshToken = generateRefreshToken({
      id: user.id,
      email: user.email,
    });

    // ÔøΩ STRAT√âGIE DE MISE √Ä JOUR INTELLIGENTE
    // Mettre √† jour seulement si:
    // - Pas de refresh token en base OU
    // - Token re√ßu via body (rotation explicite demand√©e)
    const shouldRotateToken = !user.refreshToken || !!bodyToken;

    if (shouldRotateToken) {
      await prisma.user.update({
        where: { id: user.id },
        data: {
          refreshToken: newRefreshToken,
          lastConnexion: new Date(),
        },
      });
    }

    // üç™ MISE √Ä JOUR DU COOKIE SI N√âCESSAIRE
    // Seulement si le token venait du cookie ET qu'on a fait une rotation
    if (cookieToken && shouldRotateToken) {
      res.cookie("jwt", newRefreshToken, {
        httpOnly: true,
        secure: env.nodeEnv === "production",
        sameSite: "strict",
        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 jours
      });
    }

    // üì§ R√âPONSE AVEC LES NOUVEAUX TOKENS
    return ResponseApi.success(res, "Token rafra√Æchi avec succ√®s", {
      token: {
        type: "Bearer",
        AccessToken: newAccessToken,
        // Inclure le nouveau refresh token seulement si rotation effectu√©e ET demand√©e via body
        ...(bodyToken &&
          shouldRotateToken && { RefreshToken: newRefreshToken }),
      },
      user: {
        id: user.id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
      },
    });
  } catch (error: any) {
    console.error("Erreur lors du refresh token:", error);

    // üîê GESTION S√âCURIS√âE DES ERREURS
    if (error.name === "TokenExpiredError") {
      return ResponseApi.error(
        res,
        "Refresh token expir√©",
        {
          code: "REFRESH_TOKEN_EXPIRED",
          expiredAt: error.expiredAt,
        },
        401
      );
    } else if (error.name === "JsonWebTokenError") {
      return ResponseApi.error(
        res,
        "Refresh token malform√©",
        {
          code: "MALFORMED_REFRESH_TOKEN",
        },
        400
      );
    }

    return ResponseApi.error(
      res,
      "Erreur lors du rafra√Æchissement du token",
      {
        code: "REFRESH_ERROR",
        message: error.message,
      },
      500
    );
  }
};

/**
 * üö™ D√âCONNEXION S√âCURIS√âE DE L'UTILISATEUR
 *
 * Cette fonction g√®re la d√©connexion en r√©voquant le refresh token
 * et en nettoyant les cookies de session.
 *
 * üì± IMPACT MULTI-DEVICE:
 * La d√©connexion r√©voque le refresh token principal, ce qui peut affecter
 * les autres sessions actives. C'est un comportement volontaire pour la s√©curit√©.
 */
export const logout = async (
  req: Request,
  res: Response,
  next: NextFunction
): Promise<any> => {
  try {
    const { jwt } = req.cookies;
    const refreshToken = jwt;

    // üßπ NETTOYAGE SYST√âMATIQUE DU COOKIE
    const clearCookieOptions = {
      httpOnly: true,
      secure: env.nodeEnv === "production",
      sameSite: "strict" as const,
    };

    // Si pas de refresh token, consid√©rer comme d√©j√† d√©connect√©
    if (!refreshToken) {
      res.clearCookie("jwt", clearCookieOptions);
      return ResponseApi.success(res, "Utilisateur d√©j√† d√©connect√©", {}, 200);
    }

    // üîç RECHERCHE ET R√âVOCATION DU TOKEN
    const user = await prisma.user.findFirst({ where: { refreshToken } });

    if (user) {
      await prisma.user.update({
        where: { id: user.id },
        data: { refreshToken: null },
      });
      console.log(`‚úÖ [Logout] Token r√©voqu√© pour utilisateur ${user.id}`);
    } else {
      console.log(`‚ö†Ô∏è [Logout] Aucun utilisateur trouv√© pour ce refresh token`);
    }

    // üßπ NETTOYAGE FINAL DU COOKIE
    res.clearCookie("jwt", clearCookieOptions);

    return ResponseApi.success(res, "D√©connexion r√©ussie", {}, 200);
  } catch (error) {
    console.error("‚ùå [Logout] Erreur:", error);

    // üõ°Ô∏è NETTOYAGE DE S√âCURIT√â m√™me en cas d'erreur
    res.clearCookie("jwt", {
      httpOnly: true,
      secure: env.nodeEnv === "production",
      sameSite: "strict",
    });

    return ResponseApi.success(
      res,
      "D√©connexion forc√©e (nettoyage s√©curis√©)",
      {},
      200
    );
  }
};

export const forgotPassword = async (
  req: Request,
  res: Response
): Promise<any> => {
  try {
    const { email } = req.body;

    if (!email) {
      return ResponseApi.error(res, "Email est requis", null, 400);
    }

    const user = await prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      return ResponseApi.notFound(res, "Aucun utilisateur avec cet email", 404);
    }

    const resetToken = generateResToken({
      id: user.id,
      email: user.email,
    });

    // üîç LOG: Token g√©n√©r√© pour forgot password
    console.log("üîç Forgot Password - Token g√©n√©r√©:", {
      userId: user.id,
      tokenLength: resetToken.length,
      tokenStart: resetToken.substring(0, 50) + "...",
    });

    await prisma.user.update({
      where: { id: user.id },
      data: {
        resetToken,
        resetExpires: new Date(Date.now() + 60 * 60 * 1000), // 1 heure pour correspondre au JWT
      },
    });

    // üîç LOG: V√©rification apr√®s sauvegarde
    const savedUser = await prisma.user.findUnique({
      where: { id: user.id },
      select: { resetToken: true, resetExpires: true },
    });
    console.log("üîç Forgot Password - Token sauvegard√©:", {
      savedTokenLength: savedUser?.resetToken?.length,
      savedTokenStart: savedUser?.resetToken?.substring(0, 50) + "...",
      expiresAt: savedUser?.resetExpires,
    });

    // üîß CORRECTION : G√©n√©ration du lien de r√©initialisation
    // PROBL√àME : Avant, le lien pointait vers l'accueil avec ?token=xxx
    // SOLUTION : Maintenant, le lien pointe vers la page sp√©cifique de reset password
    const resetUrl = `${env.frontendUrl}/auth/reset-password?token=${resetToken}`;

    const emailSent = await sendEmail(
      email,
      "R√©initialisation de votre mot de passe",
      `Cliquez sur ce lien pour r√©initialiser votre mot de passe: ${resetUrl}`,
      `<p>Cliquez <a href="${resetUrl}">ici</a> pour r√©initialiser votre mot de passe.</p>`
    );

    if (!emailSent) {
      return ResponseApi.error(
        res,
        "Erreur lors de l'envoi de l'email",
        null,
        500
      );
    }

    return ResponseApi.success(
      res,
      "Email de r√©initialisation envoy√©",
      null,
      200
    );
  } catch (error: any) {
    console.error("Erreur lors de la demande de r√©initialisation:", error);
    return ResponseApi.error(
      res,
      "Une erreur est survenue lors de la demande de r√©initialisation",
      error.message,
      500
    );
  }
};

export const resetPassword = async (
  req: Request,
  res: Response
): Promise<any> => {
  try {
    const { token: rawToken, newPassword } = req.body;

    // D√©codage URL du token au cas o√π il serait encod√©
    const token = decodeURIComponent(rawToken);
    if (!token || !newPassword) {
      return ResponseApi.error(
        res,
        "Token et nouveau mot de passe sont requis",
        null,
        400
      );
    }

    let decoded;
    try {
      decoded = verifyToken(token);
      console.log("üîç Reset Password - Token decoded successfully:", {
        userId: decoded?.id,
      });
    } catch (jwtError: any) {
      console.log("üîç Reset Password - JWT Error:", {
        error: jwtError.message,
        name: jwtError.name,
      });
      return ResponseApi.error(res, "Token invalide ou expir√©", null, 400);
    }

    if (!decoded) {
      return ResponseApi.error(res, "Token invalide ou expir√©", null, 400);
    }

    const user = await prisma.user.findUnique({
      where: { id: decoded.id },
    });

    // üîç LOG 3: V√©rification de l'utilisateur et du token stock√©
    console.log("üîç Reset Password - User check:", {
      userExists: !!user,
      hasResetToken: !!user?.resetToken,
      tokenMatch: user?.resetToken === token,
      hasResetExpires: !!user?.resetExpires,
      expiresAt: user?.resetExpires,
      now: new Date(),
    });

    // üîç LOG 4: Comparaison d√©taill√©e des tokens
    console.log("üîç Reset Password - Token comparison:", {
      tokenFromRequest: token.substring(0, 50) + "...",
      tokenFromDB: user?.resetToken?.substring(0, 50) + "...",
      tokenLengths: {
        request: token.length,
        db: user?.resetToken?.length,
      },
      areEqual: user?.resetToken === token,
    });

    if (!user || user.resetToken !== token || !user.resetExpires) {
      return ResponseApi.error(res, "Token invalide ou expir√©", null, 400);
    }

    if (user.resetExpires < new Date()) {
      return ResponseApi.error(res, "Token expir√©", null, 400);
    }

    const hashedPassword = await hashPassword(newPassword);

    const newUser = await prisma.user.update({
      where: { id: decoded.id },
      data: {
        password: hashedPassword,
        resetToken: null,
        resetExpires: null,
      },
    });

    console.log("‚úÖ Reset Password - Succ√®s pour userId:", decoded.id);

    return ResponseApi.success(
      res,
      "Mot de passe r√©initialis√© avec succ√®s",
      newUser,
      200
    );
  } catch (error: any) {
    console.error(
      "‚ùå Erreur lors de la r√©initialisation du mot de passe:",
      error
    );
    return ResponseApi.error(
      res,
      "Une erreur est survenue lors de la r√©initialisation du mot de passe",
      error.message,
      500
    );
  }
};

export const getUserProfile = async (
  req: Request,
  res: Response
): Promise<any> => {
  try {
    const userId = req.authUser?.id;

    if (!userId) {
      return ResponseApi.error(res, "Utilisateur non authentifi√©", null, 401);
    }

    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
        phone: true,
        isVerified: true,
        status: true,
        avatar: true,
        createdAt: true,
        updatedAt: true,
        lastConnexion: true,
        roles: {
          select: {
            id: true,
            roleId: true,
            userId: true,
            assignedAt: true,
            assignedBy: true,
            role: {
              select: {
                id: true,
                name: true,
                description: true,
                createdAt: true,
                updatedAt: true,
                permissions: {
                  select: {
                    id: true,
                    roleId: true,
                    permissionId: true,
                    assignedAt: true,
                    permission: {
                      select: {
                        id: true,
                        permissionKey: true,
                        title: true,
                        description: true,
                        createdAt: true,
                        updatedAt: true,
                      },
                    },
                  },
                },
              },
            },
          },
        },
        products: {
          select: {
            id: true,
            name: true,
            price: true,
            quantity: true,
            description: true,
            images: true,
            status: true,
            etat: true,
            quartier: true,
            telephone: true,
            createdAt: true,
            updatedAt: true,
            category: {
              select: {
                id: true,
                name: true,
              },
            },
            city: {
              select: {
                id: true,
                name: true,
              },
            },
          },
        },
      },
    });

    if (!user) {
      return ResponseApi.notFound(res, "Utilisateur non trouv√©", 404);
    }

    // üîß Transformer les images des produits en URLs compl√®tes
    const userWithImageUrls = {
      ...user,
      products:
        user.products?.map((product) => ({
          ...product,
          images: Array.isArray(product.images)
            ? (product.images as string[]).map((imagePath: string) =>
                Utils.resolveFileUrl(req, imagePath)
              )
            : [], // Tableau vide si pas d'images
        })) || [],
    };

    return ResponseApi.success(
      res,
      "Profil utilisateur r√©cup√©r√© avec succ√®s",
      userWithImageUrls,
      200
    );
  } catch (error: any) {
    console.error(
      "Erreur lors de la r√©cup√©ration du profil utilisateur:",
      error
    );
    return ResponseApi.error(
      res,
      "Une erreur est survenue lors de la r√©cup√©ration du profil utilisateur",
      error.message,
      500
    );
  }
};

/**
 * Fonction de callback apr√®s authentification Google r√©ussie
 */
export const googleCallback = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    // L'utilisateur est disponible dans req.user gr√¢ce √† passport
    const user = req.user as any;

    if (!user) {
      console.error("Aucun utilisateur trouv√© dans req.user");
      res.redirect(`${env.frontendUrl}/auth/login?error=auth_failed`);
      return;
    }

    // üîê G√âN√âRATION DES TOKENS D'ACC√àS ET DE RAFRA√éCHISSEMENT
    const AccessToken = generateToken({
      id: user.id,
      email: user.email,
    });

    const newRefreshToken = generateRefreshToken({
      id: user.id,
      email: user.email,
    });

    // üîê GESTION MULTI-DEVICE: V√©rifier l'√©tat actuel des tokens
    const currentUser = await prisma.user.findUnique({
      where: { id: user.id },
      select: { refreshToken: true },
    });

    // üéØ STRAT√âGIE MULTI-DEVICE SIMPLIFI√âE:
    // - Si aucun refresh token existant ‚Üí utiliser le nouveau
    // - Si refresh token existant ‚Üí le conserver pour permettre les sessions multiples
    const finalRefreshToken = currentUser?.refreshToken || newRefreshToken;
    const shouldUpdateToken = !currentUser?.refreshToken;

    // üìù MISE √Ä JOUR EN BASE: Seulement si n√©cessaire
    await prisma.user.update({
      where: { id: user.id },
      data: {
        ...(shouldUpdateToken && { refreshToken: finalRefreshToken }),
        lastConnexion: new Date(),
      },
    });

    // üç™ CONFIGURATION DU COOKIE DE SESSION
    res.cookie("jwt", finalRefreshToken, {
      httpOnly: true,
      secure: env.nodeEnv === "production",
      sameSite: "lax",
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 jours
    });

    console.log("‚úÖ [GoogleAuth] Connexion r√©ussie:", {
      id: user.id,
      email: user.email,
      tokenGenerated: true,
      sessionId: req.sessionID,
      isMultiDevice: !shouldUpdateToken, // Indique si c'est une session suppl√©mentaire
      tokenStrategy: shouldUpdateToken ? "nouveau_token" : "token_existant",
    });

    // Rediriger vers le frontend avec le token en param√®tre
    res.redirect(
      `${env.frontendUrl}/auth/social-callback?token=${encodeURIComponent(
        AccessToken
      )}`
    );
  } catch (error) {
    console.error("Erreur lors de la connexion Google:", error);

    // D√©truire la session en cas d'erreur pour √©viter les √©tats incoh√©rents
    if (req.session) {
      req.session.destroy((err) => {
        if (err)
          console.error("Erreur lors de la destruction de session:", err);
      });
    }

    res.redirect(`${env.frontendUrl}/auth/login?error=server_error`);
  }
};
