"use strict";
/**
 * üîê MIDDLEWARES D'AUTHENTIFICATION ET D'AUTORISATION - BuyAndSale
 *
 * Ce module contient les middlewares de s√©curit√© pour:
 * - V√©rification de l'authentification (JWT access tokens)
 * - V√©rification des autorisations (r√¥les SUPER_ADMIN)
 *
 * üéØ STRAT√âGIE DE S√âCURIT√â:
 * - Validation stricte des tokens JWT
 * - Gestion d√©taill√©e des erreurs (token expir√©, invalide, etc.)
 * - V√©rification des r√¥les bas√©e sur la base de donn√©es (s√©curit√© renforc√©e)
 * - Support des formats Bearer token flexible
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAdmin = exports.authenticate = void 0;
const response_js_1 = __importDefault(require("../helper/response.js"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const config_js_1 = __importDefault(require("../config/config.js"));
const prisma_client_js_1 = __importDefault(require("../model/prisma.client.js"));
/**
 * üîë MIDDLEWARE D'AUTHENTIFICATION
 *
 * V√©rifie la validit√© du token JWT et attache l'utilisateur √† la requ√™te.
 * Compatible avec les tokens envoy√©s via header Authorization.
 *
 * @param req - Requ√™te Express
 * @param res - R√©ponse Express
 * @param next - Fonction next pour continuer le pipeline
 */
const authenticate = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // üì° EXTRACTION DU TOKEN DEPUIS L'EN-T√äTE AUTHORIZATION
        const authHeader = req.header("Authorization");
        const token = (authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith("Bearer "))
            ? authHeader.substring(7) // Format: "Bearer <token>"
            : authHeader; // Format direct: "<token>"
        if (!token) {
            return response_js_1.default.error(res, "Token d'authentification requis", {
                code: "NO_TOKEN",
            }, 401);
        }
        // üîì D√âCODAGE ET VALIDATION DU TOKEN JWT
        const decoded = jsonwebtoken_1.default.verify(token, config_js_1.default.jwtSecret);
        // üë§ R√âCUP√âRATION DES DONN√âES UTILISATEUR
        const user = yield prisma_client_js_1.default.user.findUnique({
            where: { id: decoded.id },
        });
        if (!user) {
            return response_js_1.default.error(res, "Utilisateur non trouv√©", {
                code: "USER_NOT_FOUND",
            }, 404);
        }
        if (!user.isVerified) {
            return response_js_1.default.error(res, "Compte non v√©rifi√©", {
                code: "ACCOUNT_NOT_VERIFIED",
            }, 403);
        }
        if (user.status !== "ACTIVE") {
            return response_js_1.default.error(res, "Compte suspendu ou inactif", {
                code: "ACCOUNT_INACTIVE",
                status: user.status,
            }, 403);
        }
        // ‚úÖ AUTHENTIFICATION R√âUSSIE
        req.authUser = user;
        next();
    }
    catch (error) {
        console.error("‚ùå [Auth] Erreur d'authentification:", error.message);
        // ÔøΩ GESTION D√âTAILL√âE DES ERREURS JWT
        if (error.name === "TokenExpiredError") {
            return response_js_1.default.error(res, "Token expir√©", {
                code: "TOKEN_EXPIRED",
                expiredAt: error.expiredAt,
                hint: "Utilisez le refresh token pour obtenir un nouveau token d'acc√®s",
            }, 401);
        }
        if (error.name === "JsonWebTokenError") {
            return response_js_1.default.error(res, "Token malform√© ou invalide", {
                code: "TOKEN_INVALID",
            }, 401);
        }
        if (error.name === "NotBeforeError") {
            return response_js_1.default.error(res, "Token pas encore actif", {
                code: "TOKEN_NOT_ACTIVE",
            }, 401);
        }
        // üö® ERREUR D'AUTHENTIFICATION G√âN√âRIQUE
        return response_js_1.default.error(res, "√âchec de l'authentification", {
            code: "AUTH_ERROR",
        }, 401);
    }
});
exports.authenticate = authenticate;
/**
 * üõ°Ô∏è MIDDLEWARE D'AUTORISATION ADMIN
 *
 * V√©rifie que l'utilisateur authentifi√© poss√®de le r√¥le SUPER_ADMIN.
 * Ce middleware doit √™tre utilis√© apr√®s le middleware authenticate.
 *
 * üîí S√âCURIT√â RENFORC√âE:
 * - V√©rification des r√¥les bas√©e sur la base de donn√©es (pas sur le token)
 * - Protection contre les attaques de manipulation de tokens
 * - Validation compl√®te de l'utilisateur et de ses permissions
 *
 * @param req - Requ√™te Express
 * @param res - R√©ponse Express
 * @param next - Fonction next pour continuer le pipeline
 */
const isAdmin = (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // üì° EXTRACTION DU TOKEN (m√™me logique que authenticate)
        const authHeader = req.header("Authorization");
        const token = (authHeader === null || authHeader === void 0 ? void 0 : authHeader.startsWith("Bearer "))
            ? authHeader.substring(7)
            : authHeader;
        if (!token) {
            return response_js_1.default.error(res, "Token d'authentification requis", {
                code: "NO_TOKEN",
            }, 401);
        }
        // üîì D√âCODAGE DU TOKEN
        const decoded = jsonwebtoken_1.default.verify(token, config_js_1.default.jwtSecret);
        // üë§ R√âCUP√âRATION COMPL√àTE DE L'UTILISATEUR AVEC SES R√îLES
        const userWithRoles = yield prisma_client_js_1.default.user.findUnique({
            where: { id: decoded.id },
            include: {
                roles: {
                    include: {
                        role: true,
                    },
                },
            },
        });
        if (!userWithRoles) {
            return response_js_1.default.error(res, "Utilisateur non trouv√©", {
                code: "USER_NOT_FOUND",
            }, 404);
        }
        if (!userWithRoles.isVerified) {
            return response_js_1.default.error(res, "Compte non v√©rifi√©", {
                code: "ACCOUNT_NOT_VERIFIED",
            }, 403);
        }
        if (userWithRoles.status !== "ACTIVE") {
            return response_js_1.default.error(res, "Compte suspendu ou inactif", {
                code: "ACCOUNT_INACTIVE",
                status: userWithRoles.status,
            }, 403);
        }
        // üîç V√âRIFICATION DU R√îLE SUPER_ADMIN
        const hasAdminRole = userWithRoles.roles.some((userRole) => userRole.role.name === "SUPER_ADMIN");
        if (!hasAdminRole) {
            const userRoles = userWithRoles.roles.map((ur) => ur.role.name);
            return response_js_1.default.error(res, "Acc√®s refus√© : privil√®ges administrateur requis", {
                code: "INSUFFICIENT_PRIVILEGES",
                userRoles,
                requiredRole: "SUPER_ADMIN",
            }, 403);
        }
        // ‚úÖ AUTORISATION ACCORD√âE
        req.authUser = userWithRoles;
        next();
    }
    catch (error) {
        console.error("‚ùå [Admin] Erreur d'autorisation:", error.message);
        // üîç GESTION DES ERREURS JWT (similaire √† authenticate)
        if (error.name === "TokenExpiredError") {
            return response_js_1.default.error(res, "Token expir√©", {
                code: "TOKEN_EXPIRED",
                expiredAt: error.expiredAt,
            }, 401);
        }
        if (error.name === "JsonWebTokenError") {
            return response_js_1.default.error(res, "Token malform√© ou invalide", {
                code: "TOKEN_INVALID",
            }, 401);
        }
        return response_js_1.default.error(res, "√âchec de la v√©rification des autorisations", {
            code: "AUTHORIZATION_ERROR",
        }, 401);
    }
});
exports.isAdmin = isAdmin;
