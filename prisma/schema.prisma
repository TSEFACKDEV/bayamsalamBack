// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  CERTIFIED
  ADMIN
}

enum AccountStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         UserRole      @default(USER)
  status       AccountStatus @default(PENDING)
  avatar       String?
  cinPdf       String? // PDF de la carte d'identit√©
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  products     Product[]
  contacts     Contact[]
  reviews      Review[]
  resetToken   String?
  resetExpires DateTime?
}

model Product {
  id          String   @id @default(uuid())
  name        String?
  price       Float
  quantity    Int
  description String
  images      Json // Tableau d'URLs d'images
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  city        City     @relation(fields: [cityId], references: [id])
  cityId      String
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model City {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime @default(now())
}
